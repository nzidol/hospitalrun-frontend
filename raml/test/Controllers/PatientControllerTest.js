/*
 * HospitalRunFHIRAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */
 'use strict';

const chai = require('chai');
const assert = chai.assert;
const TestHelper = require("../TestHelper");
const APIHelper = require("../../lib/APIHelper");
const testerlib = require("../../lib");
const testConfiguration = require("../TestBootstrap");
const baseController = require("../../lib/Controllers/BaseController");

const controller = testerlib.PatientController;
const PatientBundle = testerlib.PatientBundle;
const Patient = testerlib.Patient;
const FormatEnum = testerlib.FormatEnum;
const ConditionBundle = testerlib.ConditionBundle;
const ObservationBundle = testerlib.ObservationBundle;
const MedicationOrderBundle = testerlib.MedicationOrderBundle;
const AppointmentBundle = testerlib.AppointmentBundle;
const AllergyIntoleranceBundle = testerlib.AllergyIntoleranceBundle;
const SummaryEnum = testerlib.SummaryEnum;

describe("PatientController Tests", function tests() {
    this.timeout(testConfiguration.TEST_TIMEOUT);

    /**
     * The history interaction retrieves the history of either a particular resource or all resources of a given type.
     */
    it("should testPatientHistory1 response", function testPatientHistory1Test(done) {
        // parameters for the API call
        let count = null;
        let since = null;
        let active = null;
        let address = null;
        let addressCity = null;
        let addressCountry = null;
        let addressPostalcode = null;
        let addressState = null;
        let addressUse = null;
        let animalBreed = null;
        let animalSpecies = null;
        let birthdate = null;
        let careprovider = null;
        let deathdate = null;
        let deceased = null;
        let email = null;
        let family = null;
        let gender = null;
        let given = null;
        let identifier = null;
        let language = null;
        let link = null;
        let name = null;
        let organization = null;
        let phone = null;
        let phonetic = null;
        let telecom = null;

        controller.getPatientHistory(count, since, active, address, addressCity, addressCountry, addressPostalcode, addressState, addressUse, animalBreed, animalSpecies, birthdate, careprovider, deathdate, deceased, email, family, gender, given, identifier, language, link, name, organization, phone, phonetic, telecom, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        });
    });

    /**
     * This interaction searches a set of resources based on some filter criteria.
     */
    it("should testPatientSearch1 response", function testPatientSearch1Test(done) {
        // parameters for the API call
        let active = null;
        let address = null;
        let addressCity = null;
        let addressCountry = null;
        let addressPostalcode = null;
        let addressState = null;
        let addressUse = null;
        let animalBreed = null;
        let animalSpecies = null;
        let birthdate = null;
        let careprovider = null;
        let deathdate = null;
        let deceased = null;
        let email = null;
        let family = null;
        let gender = null;
        let given = null;
        let identifier = null;
        let language = null;
        let link = null;
        let name = null;
        let organization = null;
        let phone = null;
        let phonetic = null;
        let telecom = null;

        controller.getPatientSearch(active, address, addressCity, addressCountry, addressPostalcode, addressState, addressUse, animalBreed, animalSpecies, birthdate, careprovider, deathdate, deceased, email, family, gender, given, identifier, language, link, name, organization, phone, phonetic, telecom, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        });
    });

    /**
     * This interaction searches a set of resources based on some filter criteria.
     */
    it("should testPatient1 response", function testPatient1Test(done) {
        // parameters for the API call
        let active = null;
        let address = null;
        let addressCity = null;
        let addressCountry = null;
        let addressPostalcode = null;
        let addressState = null;
        let addressUse = null;
        let animalBreed = null;
        let animalSpecies = null;
        let birthdate = null;
        let careprovider = null;
        let deathdate = null;
        let deceased = null;
        let email = null;
        let family = null;
        let gender = null;
        let given = null;
        let identifier = null;
        let language = null;
        let link = null;
        let name = null;
        let organization = null;
        let phone = null;
        let phonetic = null;
        let telecom = null;

        controller.getPatient(active, address, addressCity, addressCountry, addressPostalcode, addressState, addressUse, animalBreed, animalSpecies, birthdate, careprovider, deathdate, deceased, email, family, gender, given, identifier, language, link, name, organization, phone, phonetic, telecom, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        });
    });

    /**
     * The conditional delete interaction allows a client to delete an existing resource based on some selection criteria, rather than by a specific logical id.
     */
    it("should testPatient11 response", function testPatient11Test(done) {
        // parameters for the API call
        let active = null;
        let address = null;
        let addressCity = null;
        let addressCountry = null;
        let addressPostalcode = null;
        let addressState = null;
        let addressUse = null;
        let animalBreed = null;
        let animalSpecies = null;
        let birthdate = null;
        let careprovider = null;
        let deathdate = null;
        let deceased = null;
        let email = null;
        let family = null;
        let gender = null;
        let given = null;
        let identifier = null;
        let language = null;
        let link = null;
        let name = null;
        let organization = null;
        let phone = null;
        let phonetic = null;
        let telecom = null;

        controller.deletePatient(active, address, addressCity, addressCountry, addressPostalcode, addressState, addressUse, animalBreed, animalSpecies, birthdate, careprovider, deathdate, deceased, email, family, gender, given, identifier, language, link, name, organization, phone, phonetic, telecom, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        });
    });

    /**
     * The conditional update interaction allows a client to update an existing resource based on some identification criteria, rather than by logical id.
     */
    it("should testPatient12 response", function testPatient12Test(done) {
        // parameters for the API call
        let active = null;
        let address = null;
        let addressCity = null;
        let addressCountry = null;
        let addressPostalcode = null;
        let addressState = null;
        let addressUse = null;
        let animalBreed = null;
        let animalSpecies = null;
        let birthdate = null;
        let careprovider = null;
        let deathdate = null;
        let deceased = null;
        let email = null;
        let family = null;
        let gender = null;
        let given = null;
        let identifier = null;
        let language = null;
        let link = null;
        let name = null;
        let organization = null;
        let phone = null;
        let phonetic = null;
        let telecom = null;

        controller.updatePatient(active, address, addressCity, addressCountry, addressPostalcode, addressState, addressUse, animalBreed, animalSpecies, birthdate, careprovider, deathdate, deceased, email, family, gender, given, identifier, language, link, name, organization, phone, phonetic, telecom, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        });
    });

});
