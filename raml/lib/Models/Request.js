/**
 * HospitalRunFHIRAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */

'use strict';

const BackboneElement = require('./BackboneElement');

/**
 * Creates an instance of Request
 */
class Request extends BackboneElement {
    /**
     * @constructor
     * @param   {Object}  obj    The object passed to constructor
     */
    constructor(obj) {
        super(obj);
        if (obj === undefined || obj === null) return;
        this.method = this.constructor.getValue(obj.method);
        this.url = this.constructor.getValue(obj.url);
        this.ifMatch = this.constructor.getValue(obj.ifMatch);
        this.ifNoneExist = this.constructor.getValue(obj.ifNoneExist);
        this.ifNoneMatch = this.constructor.getValue(obj.ifNoneMatch);
        this.ifModifiedSince = this.constructor.getValue(obj.ifModifiedSince);
    }

    /**
     * Function containing information about the fields of this model
     * @return   {array}   Array of objects containing information about the fields
     */
    static mappingInfo() {
        return super.mappingInfo().concat([
            { name: 'method', realName: 'method' },
            { name: 'url', realName: 'url' },
            { name: 'ifMatch', realName: 'ifMatch' },
            { name: 'ifNoneExist', realName: 'ifNoneExist' },
            { name: 'ifNoneMatch', realName: 'ifNoneMatch' },
            { name: 'ifModifiedSince', realName: 'ifModifiedSince' },
        ]);
    }

    /**
     * Function containing information about discriminator values
     * mapped with their corresponding model class names
     *
     * @return   {object}  Object containing Key-Value pairs mapping discriminator
     *                     values with their corresponding model classes
     */
    static discriminatorMap() {
        return {
        };
    }
}

module.exports = Request;
