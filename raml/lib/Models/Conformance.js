/**
 * HospitalRunFHIRAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */

'use strict';

const DomainResource = require('./DomainResource');

/**
 * Creates an instance of Conformance
 */
class Conformance extends DomainResource {
    /**
     * @constructor
     * @param   {Object}  obj    The object passed to constructor
     */
    constructor(obj) {
        super(obj);
        if (obj === undefined || obj === null) return;
        this.date = this.constructor.getValue(obj.date);
        this.kind = this.constructor.getValue(obj.kind);
        this.fhirVersion = this.constructor.getValue(obj.fhirVersion);
        this.acceptUnknown = this.constructor.getValue(obj.acceptUnknown);
        this.format = this.constructor.getValue(obj.format);
        this.url = this.constructor.getValue(obj.url);
        this.version = this.constructor.getValue(obj.version);
        this.name = this.constructor.getValue(obj.name);
        this.status = this.constructor.getValue(obj.status);
        this.experimental = this.constructor.getValue(obj.experimental);
        this.publisher = this.constructor.getValue(obj.publisher);
        this.contact = this.constructor.getValue(obj.contact);
        this.description = this.constructor.getValue(obj.description);
        this.requirements = this.constructor.getValue(obj.requirements);
        this.copyright = this.constructor.getValue(obj.copyright);
        this.software = this.constructor.getValue(obj.software);
        this.implementation = this.constructor.getValue(obj.implementation);
        this.profile = this.constructor.getValue(obj.profile);
        this.rest = this.constructor.getValue(obj.rest);
        this.messaging = this.constructor.getValue(obj.messaging);
        this.document = this.constructor.getValue(obj.document);
    }

    /**
     * Function containing information about the fields of this model
     * @return   {array}   Array of objects containing information about the fields
     */
    static mappingInfo() {
        return super.mappingInfo().concat([
            { name: 'date', realName: 'date', isDateTime: true, dateTimeValue: 'rfc3339' },
            { name: 'kind', realName: 'kind' },
            { name: 'fhirVersion', realName: 'fhirVersion' },
            { name: 'acceptUnknown', realName: 'acceptUnknown' },
            { name: 'format', realName: 'format', array: true },
            { name: 'url', realName: 'url' },
            { name: 'version', realName: 'version' },
            { name: 'name', realName: 'name' },
            { name: 'status', realName: 'status' },
            { name: 'experimental', realName: 'experimental' },
            { name: 'publisher', realName: 'publisher' },
            { name: 'contact', realName: 'contact', array: true, type: 'ContactItem' },
            { name: 'description', realName: 'description' },
            { name: 'requirements', realName: 'requirements' },
            { name: 'copyright', realName: 'copyright' },
            { name: 'software', realName: 'software', type: 'Software' },
            { name: 'implementation', realName: 'implementation', type: 'Implementation' },
            { name: 'profile', realName: 'profile', array: true, type: 'Reference' },
            { name: 'rest', realName: 'rest', array: true, type: 'RestItem' },
            { name: 'messaging', realName: 'messaging', array: true, type: 'MessagingItem' },
            { name: 'document', realName: 'document', array: true, type: 'DocumentItem' },
        ]);
    }

    /**
     * Function containing information about discriminator values
     * mapped with their corresponding model class names
     *
     * @return   {object}  Object containing Key-Value pairs mapping discriminator
     *                     values with their corresponding model classes
     */
    static discriminatorMap() {
        return {
        };
    }
}

module.exports = Conformance;
