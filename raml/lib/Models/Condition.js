/**
 * HospitalRunFHIRAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */

'use strict';

const DomainResource = require('./DomainResource');

/**
 * Creates an instance of Condition
 */
class Condition extends DomainResource {
    /**
     * @constructor
     * @param   {Object}  obj    The object passed to constructor
     */
    constructor(obj) {
        super(obj);
        if (obj === undefined || obj === null) return;
        this.patient = this.constructor.getValue(obj.patient);
        this.code = this.constructor.getValue(obj.code);
        this.verificationStatus = this.constructor.getValue(obj.verificationStatus);
        this.identifier = this.constructor.getValue(obj.identifier);
        this.encounter = this.constructor.getValue(obj.encounter);
        this.asserter = this.constructor.getValue(obj.asserter);
        this.dateRecorded = this.constructor.getValue(obj.dateRecorded);
        this.category = this.constructor.getValue(obj.category);
        this.clinicalStatus = this.constructor.getValue(obj.clinicalStatus);
        this.severity = this.constructor.getValue(obj.severity);
        this.onset = this.constructor.getValue(obj.onset);
        this.abatement = this.constructor.getValue(obj.abatement);
        this.stage = this.constructor.getValue(obj.stage);
        this.evidence = this.constructor.getValue(obj.evidence);
        this.bodySite = this.constructor.getValue(obj.bodySite);
        this.notes = this.constructor.getValue(obj.notes);
    }

    /**
     * Function containing information about the fields of this model
     * @return   {array}   Array of objects containing information about the fields
     */
    static mappingInfo() {
        return super.mappingInfo().concat([
            { name: 'patient', realName: 'patient', type: 'Reference' },
            { name: 'code', realName: 'code', type: 'CodeableConcept' },
            { name: 'verificationStatus', realName: 'verificationStatus' },
            { name: 'identifier', realName: 'identifier', array: true, type: 'Identifier' },
            { name: 'encounter', realName: 'encounter', type: 'Reference' },
            { name: 'asserter', realName: 'asserter', type: 'Reference' },
            { name: 'dateRecorded', realName: 'dateRecorded' },
            { name: 'category', realName: 'category', type: 'CodeableConcept' },
            { name: 'clinicalStatus', realName: 'clinicalStatus' },
            { name: 'severity', realName: 'severity', type: 'CodeableConcept' },
            { name: 'onset', realName: 'onset' },
            { name: 'abatement', realName: 'abatement' },
            { name: 'stage', realName: 'stage', type: 'Stage' },
            { name: 'evidence', realName: 'evidence', array: true, type: 'EvidenceItem' },
            { name: 'bodySite', realName: 'bodySite', array: true, type: 'CodeableConcept' },
            { name: 'notes', realName: 'notes' },
        ]);
    }

    /**
     * Function containing information about discriminator values
     * mapped with their corresponding model class names
     *
     * @return   {object}  Object containing Key-Value pairs mapping discriminator
     *                     values with their corresponding model classes
     */
    static discriminatorMap() {
        return {
        };
    }
}

module.exports = Condition;
