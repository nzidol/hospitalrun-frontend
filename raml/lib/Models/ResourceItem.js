/**
 * HospitalRunFHIRAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */

'use strict';

const BackboneElement = require('./BackboneElement');

/**
 * Creates an instance of ResourceItem
 */
class ResourceItem extends BackboneElement {
    /**
     * @constructor
     * @param   {Object}  obj    The object passed to constructor
     */
    constructor(obj) {
        super(obj);
        if (obj === undefined || obj === null) return;
        this.type = this.constructor.getValue(obj.type);
        this.interaction = this.constructor.getValue(obj.interaction);
        this.profile = this.constructor.getValue(obj.profile);
        this.versioning = this.constructor.getValue(obj.versioning);
        this.readHistory = this.constructor.getValue(obj.readHistory);
        this.updateCreate = this.constructor.getValue(obj.updateCreate);
        this.conditionalCreate = this.constructor.getValue(obj.conditionalCreate);
        this.conditionalUpdate = this.constructor.getValue(obj.conditionalUpdate);
        this.coditionalDelete = this.constructor.getValue(obj.coditionalDelete);
        this.searchInclude = this.constructor.getValue(obj.searchInclude);
        this.searchRevInclude = this.constructor.getValue(obj.searchRevInclude);
        this.searchParam = this.constructor.getValue(obj.searchParam);
    }

    /**
     * Function containing information about the fields of this model
     * @return   {array}   Array of objects containing information about the fields
     */
    static mappingInfo() {
        return super.mappingInfo().concat([
            { name: 'type', realName: 'type' },
            { name: 'interaction', realName: 'interaction', array: true, type: 'InteractionItem' },
            { name: 'profile', realName: 'profile', type: 'Reference' },
            { name: 'versioning', realName: 'versioning' },
            { name: 'readHistory', realName: 'readHistory' },
            { name: 'updateCreate', realName: 'updateCreate' },
            { name: 'conditionalCreate', realName: 'conditionalCreate' },
            { name: 'conditionalUpdate', realName: 'conditionalUpdate' },
            { name: 'coditionalDelete', realName: 'coditionalDelete' },
            { name: 'searchInclude', realName: 'searchInclude' },
            { name: 'searchRevInclude', realName: 'searchRevInclude' },
            { name: 'searchParam', realName: 'searchParam', array: true, type: 'SearchParamItem' },
        ]);
    }

    /**
     * Function containing information about discriminator values
     * mapped with their corresponding model class names
     *
     * @return   {object}  Object containing Key-Value pairs mapping discriminator
     *                     values with their corresponding model classes
     */
    static discriminatorMap() {
        return {
        };
    }
}

module.exports = ResourceItem;
