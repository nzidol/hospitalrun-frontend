/**
 * HospitalRunFHIRAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */

'use strict';

const DomainResource = require('./DomainResource');

/**
 * Creates an instance of Observation
 */
class Observation extends DomainResource {
    /**
     * @constructor
     * @param   {Object}  obj    The object passed to constructor
     */
    constructor(obj) {
        super(obj);
        if (obj === undefined || obj === null) return;
        this.status = this.constructor.getValue(obj.status);
        this.code = this.constructor.getValue(obj.code);
        this.identifier = this.constructor.getValue(obj.identifier);
        this.category = this.constructor.getValue(obj.category);
        this.subject = this.constructor.getValue(obj.subject);
        this.encounter = this.constructor.getValue(obj.encounter);
        this.effective = this.constructor.getValue(obj.effective);
        this.issued = this.constructor.getValue(obj.issued);
        this.performer = this.constructor.getValue(obj.performer);
        this.value = this.constructor.getValue(obj.value);
        this.dataAbsentReason = this.constructor.getValue(obj.dataAbsentReason);
        this.interpretation = this.constructor.getValue(obj.interpretation);
        this.comments = this.constructor.getValue(obj.comments);
        this.bodySite = this.constructor.getValue(obj.bodySite);
        this.method = this.constructor.getValue(obj.method);
        this.specimen = this.constructor.getValue(obj.specimen);
        this.device = this.constructor.getValue(obj.device);
        this.referenceRange = this.constructor.getValue(obj.referenceRange);
        this.related = this.constructor.getValue(obj.related);
        this.component = this.constructor.getValue(obj.component);
    }

    /**
     * Function containing information about the fields of this model
     * @return   {array}   Array of objects containing information about the fields
     */
    static mappingInfo() {
        return super.mappingInfo().concat([
            { name: 'status', realName: 'status' },
            { name: 'code', realName: 'code', type: 'CodeableConcept' },
            { name: 'identifier', realName: 'identifier', array: true, type: 'Identifier' },
            { name: 'category', realName: 'category', type: 'CodeableConcept' },
            { name: 'subject', realName: 'subject', type: 'Reference' },
            { name: 'encounter', realName: 'encounter', type: 'Reference' },
            { name: 'effective', realName: 'effective' },
            { name: 'issued', realName: 'issued' },
            { name: 'performer', realName: 'performer', array: true, type: 'Reference' },
            { name: 'value', realName: 'value' },
            { name: 'dataAbsentReason', realName: 'dataAbsentReason', type: 'CodeableConcept' },
            { name: 'interpretation', realName: 'interpretation', type: 'CodeableConcept' },
            { name: 'comments', realName: 'comments' },
            { name: 'bodySite', realName: 'bodySite', type: 'CodeableConcept' },
            { name: 'method', realName: 'method', type: 'CodeableConcept' },
            { name: 'specimen', realName: 'specimen', type: 'Reference' },
            { name: 'device', realName: 'device', type: 'Reference' },
            {
                name: 'referenceRange',
                realName: 'referenceRange',
                array: true,
                type: 'ReferenceRangeItem',
            },
            { name: 'related', realName: 'related', array: true, type: 'RelatedItem' },
            { name: 'component', realName: 'component', array: true, type: 'ComponentItem' },
        ]);
    }

    /**
     * Function containing information about discriminator values
     * mapped with their corresponding model class names
     *
     * @return   {object}  Object containing Key-Value pairs mapping discriminator
     *                     values with their corresponding model classes
     */
    static discriminatorMap() {
        return {
        };
    }
}

module.exports = Observation;
