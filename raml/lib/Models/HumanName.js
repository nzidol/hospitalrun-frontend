/**
 * HospitalRunFHIRAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */

'use strict';

const Element = require('./Element');

/**
 * Creates an instance of HumanName
 */
class HumanName extends Element {
    /**
     * @constructor
     * @param   {Object}  obj    The object passed to constructor
     */
    constructor(obj) {
        super(obj);
        if (obj === undefined || obj === null) return;
        this.use = this.constructor.getValue(obj.use);
        this.text = this.constructor.getValue(obj.text);
        this.family = this.constructor.getValue(obj.family);
        this.given = this.constructor.getValue(obj.given);
        this.prefix = this.constructor.getValue(obj.prefix);
        this.suffix = this.constructor.getValue(obj.suffix);
        this.period = this.constructor.getValue(obj.period);
    }

    /**
     * Function containing information about the fields of this model
     * @return   {array}   Array of objects containing information about the fields
     */
    static mappingInfo() {
        return super.mappingInfo().concat([
            { name: 'use', realName: 'use' },
            { name: 'text', realName: 'text' },
            { name: 'family', realName: 'family', array: true },
            { name: 'given', realName: 'given', array: true },
            { name: 'prefix', realName: 'prefix', array: true },
            { name: 'suffix', realName: 'suffix', array: true },
            { name: 'period', realName: 'period', type: 'Period' },
        ]);
    }

    /**
     * Function containing information about discriminator values
     * mapped with their corresponding model class names
     *
     * @return   {object}  Object containing Key-Value pairs mapping discriminator
     *                     values with their corresponding model classes
     */
    static discriminatorMap() {
        return {
        };
    }
}

module.exports = HumanName;
