/**
 * HospitalRunFHIRAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */

'use strict';

const DomainResource = require('./DomainResource');

/**
 * Creates an instance of Patient
 */
class Patient extends DomainResource {
    /**
     * @constructor
     * @param   {Object}  obj    The object passed to constructor
     */
    constructor(obj) {
        super(obj);
        if (obj === undefined || obj === null) return;
        this.identifier = this.constructor.getValue(obj.identifier);
        this.active = this.constructor.getValue(obj.active);
        this.name = this.constructor.getValue(obj.name);
        this.telecom = this.constructor.getValue(obj.telecom);
        this.gender = this.constructor.getValue(obj.gender);
        this.birthDate = this.constructor.getValue(obj.birthDate);
        this.address = this.constructor.getValue(obj.address);
        this.maritalStatus = this.constructor.getValue(obj.maritalStatus);
        this.photo = this.constructor.getValue(obj.photo);
        this.contact = this.constructor.getValue(obj.contact);
        this.animal = this.constructor.getValue(obj.animal);
        this.communication = this.constructor.getValue(obj.communication);
        this.careProvider = this.constructor.getValue(obj.careProvider);
        this.managingOrganization = this.constructor.getValue(obj.managingOrganization);
        this.link = this.constructor.getValue(obj.link);
    }

    /**
     * Function containing information about the fields of this model
     * @return   {array}   Array of objects containing information about the fields
     */
    static mappingInfo() {
        return super.mappingInfo().concat([
            { name: 'identifier', realName: 'identifier', array: true, type: 'Identifier' },
            { name: 'active', realName: 'active' },
            { name: 'name', realName: 'name', array: true, type: 'HumanName' },
            { name: 'telecom', realName: 'telecom', array: true, type: 'ContactPoint' },
            { name: 'gender', realName: 'gender' },
            { name: 'birthDate', realName: 'birthDate' },
            { name: 'address', realName: 'address', array: true, type: 'Address' },
            { name: 'maritalStatus', realName: 'maritalStatus' },
            { name: 'photo', realName: 'photo', array: true, type: 'Attachment' },
            { name: 'contact', realName: 'contact', array: true, type: 'ContactItem796' },
            { name: 'animal', realName: 'animal', type: 'Animal' },
            {
                name: 'communication',
                realName: 'communication',
                array: true,
                type: 'CommunicationItem',
            },
            { name: 'careProvider', realName: 'careProvider', array: true, type: 'Reference' },
            { name: 'managingOrganization', realName: 'managingOrganization', type: 'Reference' },
            { name: 'link', realName: 'link', type: 'Link' },
        ]);
    }

    /**
     * Function containing information about discriminator values
     * mapped with their corresponding model class names
     *
     * @return   {object}  Object containing Key-Value pairs mapping discriminator
     *                     values with their corresponding model classes
     */
    static discriminatorMap() {
        return {
        };
    }
}

module.exports = Patient;
